'use strict';
const vscode = require("vscode");
const vscode_1 = require("vscode");
const filePosition_1 = require("./filePosition");
const sourceMapStore_1 = require("./sourceMapStore");
let sourceMapStore;
let navigateCommand;
function activate(context) {
    navigateCommand = vscode.commands.registerCommand('smnavigator.navigate', navigate);
    sourceMapStore = new sourceMapStore_1.SourceMapStore();
    context.subscriptions.push(navigateCommand, sourceMapStore);
}
exports.activate = activate;
function navigate() {
    sourceMapStore.getForCurrentDocument()
        .then(sourceMapping => {
        if (!sourceMapping) {
            return null;
        }
        const activePosition = filePosition_1.FilePosition.getActivePosition();
        return sourceMapping.isCurrentDocumentGenerated() ?
            sourceMapping.originalPositionFor(activePosition) :
            sourceMapping.generatedPositionFor(activePosition);
    })
        .then(destinationPosition => {
        destinationPosition ?
            navigateToDestination(destinationPosition) :
            vscode.window.showInformationMessage(`Can't get source map for current document`);
    });
}
function navigateToDestination(destination) {
    vscode.workspace.openTextDocument(destination.file)
        .then(vscode.window.showTextDocument)
        .then(editor => {
        editor.selection = new vscode_1.Selection(destination, destination);
        editor.revealRange(editor.selection, vscode.TextEditorRevealType.InCenter);
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZW5zaW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZXh0ZW5zaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUViLGlDQUFpQztBQUNqQyxtQ0FBK0M7QUFDL0MsaURBQThDO0FBQzlDLHFEQUFrRDtBQUVsRCxJQUFJLGNBQThCLENBQUM7QUFDbkMsSUFBSSxlQUEyQixDQUFDO0FBRWhDLGtCQUF5QixPQUFnQztJQUNyRCxlQUFlLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsc0JBQXNCLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDcEYsY0FBYyxHQUFHLElBQUksK0JBQWMsRUFBRSxDQUFDO0lBQ3RDLE9BQU8sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxjQUFjLENBQUMsQ0FBQztBQUNoRSxDQUFDO0FBSkQsNEJBSUM7QUFFRDtJQUNJLGNBQWMsQ0FBQyxxQkFBcUIsRUFBRTtTQUNyQyxJQUFJLENBQUMsYUFBYTtRQUNmLEVBQUUsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztZQUNqQixNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2hCLENBQUM7UUFFRCxNQUFNLGNBQWMsR0FBRywyQkFBWSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDeEQsTUFBTSxDQUFDLGFBQWEsQ0FBQywwQkFBMEIsRUFBRTtZQUM3QyxhQUFhLENBQUMsbUJBQW1CLENBQUMsY0FBYyxDQUFDO1lBQ2pELGFBQWEsQ0FBQyxvQkFBb0IsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUMzRCxDQUFDLENBQUM7U0FDRCxJQUFJLENBQUMsbUJBQW1CO1FBQ3JCLG1CQUFtQjtZQUNmLHFCQUFxQixDQUFDLG1CQUFtQixDQUFDO1lBQzFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsc0JBQXNCLENBQUMsMkNBQTJDLENBQUMsQ0FBQztJQUMxRixDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUFFRCwrQkFBK0IsV0FBeUI7SUFDcEQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO1NBQ2xELElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDO1NBQ3BDLElBQUksQ0FBQyxNQUFNO1FBQ1IsTUFBTSxDQUFDLFNBQVMsR0FBRyxJQUFJLGtCQUFTLENBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQzNELE1BQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDL0UsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgKiBhcyB2c2NvZGUgZnJvbSAndnNjb2RlJztcbmltcG9ydCB7IERpc3Bvc2FibGUsIFNlbGVjdGlvbiB9IGZyb20gJ3ZzY29kZSc7XG5pbXBvcnQgeyBGaWxlUG9zaXRpb24gfSBmcm9tICcuL2ZpbGVQb3NpdGlvbic7XG5pbXBvcnQgeyBTb3VyY2VNYXBTdG9yZSB9IGZyb20gJy4vc291cmNlTWFwU3RvcmUnO1xuXG5sZXQgc291cmNlTWFwU3RvcmU6IFNvdXJjZU1hcFN0b3JlO1xubGV0IG5hdmlnYXRlQ29tbWFuZDogRGlzcG9zYWJsZTtcblxuZXhwb3J0IGZ1bmN0aW9uIGFjdGl2YXRlKGNvbnRleHQ6IHZzY29kZS5FeHRlbnNpb25Db250ZXh0KSB7XG4gICAgbmF2aWdhdGVDb21tYW5kID0gdnNjb2RlLmNvbW1hbmRzLnJlZ2lzdGVyQ29tbWFuZCgnc21uYXZpZ2F0b3IubmF2aWdhdGUnLCBuYXZpZ2F0ZSk7XG4gICAgc291cmNlTWFwU3RvcmUgPSBuZXcgU291cmNlTWFwU3RvcmUoKTtcbiAgICBjb250ZXh0LnN1YnNjcmlwdGlvbnMucHVzaChuYXZpZ2F0ZUNvbW1hbmQsIHNvdXJjZU1hcFN0b3JlKTtcbn1cblxuZnVuY3Rpb24gbmF2aWdhdGUoKSB7XG4gICAgc291cmNlTWFwU3RvcmUuZ2V0Rm9yQ3VycmVudERvY3VtZW50KClcbiAgICAudGhlbihzb3VyY2VNYXBwaW5nID0+IHtcbiAgICAgICAgaWYgKCFzb3VyY2VNYXBwaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGFjdGl2ZVBvc2l0aW9uID0gRmlsZVBvc2l0aW9uLmdldEFjdGl2ZVBvc2l0aW9uKCk7XG4gICAgICAgIHJldHVybiBzb3VyY2VNYXBwaW5nLmlzQ3VycmVudERvY3VtZW50R2VuZXJhdGVkKCkgP1xuICAgICAgICAgICAgc291cmNlTWFwcGluZy5vcmlnaW5hbFBvc2l0aW9uRm9yKGFjdGl2ZVBvc2l0aW9uKSA6XG4gICAgICAgICAgICBzb3VyY2VNYXBwaW5nLmdlbmVyYXRlZFBvc2l0aW9uRm9yKGFjdGl2ZVBvc2l0aW9uKTtcbiAgICB9KVxuICAgIC50aGVuKGRlc3RpbmF0aW9uUG9zaXRpb24gPT4ge1xuICAgICAgICBkZXN0aW5hdGlvblBvc2l0aW9uID9cbiAgICAgICAgICAgIG5hdmlnYXRlVG9EZXN0aW5hdGlvbihkZXN0aW5hdGlvblBvc2l0aW9uKSA6XG4gICAgICAgICAgICB2c2NvZGUud2luZG93LnNob3dJbmZvcm1hdGlvbk1lc3NhZ2UoYENhbid0IGdldCBzb3VyY2UgbWFwIGZvciBjdXJyZW50IGRvY3VtZW50YCk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIG5hdmlnYXRlVG9EZXN0aW5hdGlvbihkZXN0aW5hdGlvbjogRmlsZVBvc2l0aW9uKTogdm9pZCB7XG4gICAgdnNjb2RlLndvcmtzcGFjZS5vcGVuVGV4dERvY3VtZW50KGRlc3RpbmF0aW9uLmZpbGUpXG4gICAgLnRoZW4odnNjb2RlLndpbmRvdy5zaG93VGV4dERvY3VtZW50KVxuICAgIC50aGVuKGVkaXRvciA9PiB7XG4gICAgICAgIGVkaXRvci5zZWxlY3Rpb24gPSBuZXcgU2VsZWN0aW9uKGRlc3RpbmF0aW9uLCBkZXN0aW5hdGlvbik7XG4gICAgICAgIGVkaXRvci5yZXZlYWxSYW5nZShlZGl0b3Iuc2VsZWN0aW9uLCB2c2NvZGUuVGV4dEVkaXRvclJldmVhbFR5cGUuSW5DZW50ZXIpO1xuICAgIH0pO1xufVxuIl19